#########################################
IsSITA:=function(b)
local a,d,r,t,D,i,j,k,t1;

a:=Algebra(Rationals,b); 
d:=Basis(a,b);
r:=Length(b[1][1]); 
t:=false; 

t1:=0; 
for i in [1..r] do for j in [1..r] do for k in [1..r] do 
  if not(IsInt(b[i][j][k])) or b[i][j][k]<0 then t1:=1; fi; 
od; od; od; 

if not(d=fail) and t1=0 then 
t:=true;
D:=[]; 
for i in [1..r] do D[i]:=[]; for j in [1..r] do 
D[i][j]:=Coefficients(d,d[i]*d[j]); od; 
if not(TransposedMat(D[i])=d[i]) then t:=false; fi; 
od; 
fi; 

return t; 
end;  
#####################################################

IntegralMultiplicitiesCheck5:=function(f,K) 
local F,C1,T,m1,m2,m3,m4,m5,c,r,s,t,u,v,t1,f0,F1,k1,k2,k3,k4,d,d1,n,i,x;
F:=Factors(f); 
k1:=K[1]; k2:=K[2]; k3:=K[3]; k4:=K[4];  
n:=1+k1+k2+k3+k4;
T:=false; 
x:=Indeterminate(Rationals,"x");

if Length(F)=2 then 
c:=CoefficientsOfUnivariatePolynomial(F[2])[5]; 
if c=1 then T:=true; m1:=k1; 
f0:=(x-k1)*F[2]^m1;
C1:=CompanionMat(f0);
for i in [1..4] do 
  t1:=TraceMat(C1^i)/n; 
  if not(IsInt(t1)) then T:=false; fi; 
od;
if T=true then 
  d:=Discriminant(f); 
  F1:=(n^5*k1*k2*k3*k4)/(m1^4);
  d1:=d/F1;
  if not(IsInt(d1)) then T:=false; fi; 
  if IsInt(d1) then if not(IsSquareInt(d1)) then T:=false; fi; fi; 
fi; 
fi; 
fi; 

if Length(F)=3 and Degree(F[3])=3 then 
r:=RootsOfUPol(F[2])[1]; 
c:=CoefficientsOfUnivariatePolynomial(F[3])[3];
for m1 in [1..n-2] do 
m2:=(n-m1-1)/3; 
if m2>0 and IsInt(m2) and k1+m1*r-m2*c=0 then 
T:=true; 
f0:=(x-k1)*F[2]^m1*F[3]^m2;
C1:=CompanionMat(f0);
for i in [1..4] do 
  t1:=TraceMat(C1^i)/n; 
  if not(IsInt(t1)) then T:=false; fi; 
od; 
if T=true then 
  d:=Discriminant(f); 
  F1:=(n^5*k1*k2*k3*k4)/(m1*m2^3);
  d1:=d/F1; 
  if not(IsInt(d1)) then T:=false; fi; 
  if IsInt(d1) then if not(IsSquareInt(d1)) then T:=false; fi; fi; 
fi; 
fi; 
if T=true then break; fi; 
od; 
fi; 

if Length(F)=3 and Degree(F[3])=2 then 
r:=CoefficientsOfUnivariatePolynomial(F[2])[2]; 
c:=CoefficientsOfUnivariatePolynomial(F[3])[2]; 
for m1 in [1..n-2] do 
m2:=(n-2*m1-1)/2; 
if m2>0 and IsInt(m2) and k1-m1*r-m2*c=0 then 
T:=true;  
f0:=(x-k1)*F[2]^m1*F[3]^m2;
C1:=CompanionMat(f0);
for i in [1..4] do 
  t1:=TraceMat(C1^i)/n; 
  if not(IsInt(t1)) then T:=false; fi;
od; 
if T=true then 
  d:=Discriminant(f); 
  F1:=(n^5*k1*k2*k3*k4)/(m1^2*m2^2);
  d1:=d/F1; 
  if not(IsInt(d1)) then T:=false; fi; 
  if IsInt(d1) then if not(IsSquareInt(d1)) then T:=false; fi; fi; 
fi; 
fi;
if T=true then break; fi;
od; 
fi;  

if Length(F)=4 and Degree(F[4])=2 then 
r:=RootsOfUPol(F[2])[1]; 
s:=RootsOfUPol(F[3])[1]; 
c:=CoefficientsOfUnivariatePolynomial(F[4])[2]; 
for m1 in [1..n-3] do 
for m2 in [1..n-2-m1] do 
m3:=(n-m1-m2-1)/2; 
if m3>0 and IsInt(m3) and k1+m1*r+m2*s-m3*c=0 then 
T:=true; 
f0:=(x-k1)*F[2]^m1*F[3]^m2*F[4]^m3;
C1:=CompanionMat(f0);
for i in [1..4] do 
  t1:=TraceMat(C1^i)/n; 
  if not(IsInt(t1)) then T:=false; fi; 
od; 
if T=true then 
  d:=Discriminant(f); 
  F1:=(n^5*k1*k2*k3*k4)/(m1*m2*m3^2);
  d1:=d/F1; 
  if not(IsInt(d1)) then T:=false; fi; 
  if IsInt(d1) then if not(IsSquareInt(d1)) then T:=false; fi; fi; 
fi; 
fi;
if T=true then break; fi;  
od; 
if T=true then break; fi;  
od; 
fi; 

if Length(F)=5 then 
r:=RootsOfUPol(F[2])[1]; 
s:=RootsOfUPol(F[3])[1]; 
t:=RootsOfUPol(F[4])[1]; 
c:=CoefficientsOfUnivariatePolynomial(F[5])[1]; 
for m1 in [1..n-4] do 
for m2 in [1..n-m1-3] do 
for m3 in [1..n-m1-m2-2] do 
m4:=(n-1-m1-m2-m3); 
if m4>0 and IsInt(m4) and k1+m1*r+m2*s+m3*t-m4*c=0 then 
T:=true; 
f0:=(x-k1)*F[2]^m1*F[3]^m2*F[4]^m3*F[5]^m4;
C1:=CompanionMat(f0);
for i in [1..4] do 
  t1:=TraceMat(C1^i)/n; 
  if not(IsInt(t1)) then T:=false; fi; 
od; 
if T=true then 
  d:=Discriminant(f); 
  F1:=(n^5*k1*k2*k3*k4)/(m1*m2*m3*m4);
  d1:=d/F1; 
  if not(IsInt(d1)) then T:=false; fi; 
  if IsInt(d1) then if not(IsSquareInt(d1)) then T:=false; fi; fi; 
fi; 
fi; 
if T=true then break; fi; 
od;
if T=true then break; fi; 
od; 
if T=true then break; fi; 
od; 
fi; 

return T; 
end; 

###################################
###################################################

x:=Indeterminate(Rationals,"x"); 
A:=[];
A1:=[];
G:=SymmetricGroup([3..5]); 
#N:=250; 
L := [];;
N:=250;
#for N in [209..210] do Print("\n N=",N,"\n"); 
A2:=[];
for k1 in [3..9] do Print("\n \n","k=",k1,"\n"); 
N:=k1^4+k1^3+k1^2+k1;

m2:=Minimum(N-k1-3,k1^2-k1); 
indexing_var :=0;
for k2 in [1..m2] do 
for p112 in [1..k1] do if p112*k2/k1 in [1..k1-1] then p121:=p112*k2/k1; 

m3:=Maximum(k1^2-k1-p112*k2,k1*k2-p121*k1); m3:=Minimum(m3,N-k1-k2-2); 
for k3 in [1..m3] do 
for p113 in [0..p112] do if p113*k3/k1 in [0..k1-1-p121] then p131:=p113*k3/k1; 

for p114 in [0..p113] do m4:=Maximum(k1^2-k1-p112*k2-p113*k3,Maximum(k1*k2-p121*k1,k1*k3-p131*k1));
#if p114>0 then m3:=k1^2-k1-p112*k2-p113*k3; else m3:=Maximum(k1*k2-p121*k1,k1*k3-p131*k1); m3:=Maximum(m3,k3^2-k3); fi;
for k4 in [k3..m4] do n:=1+k1+k2+k3+k4; if n<N+1 and n>k1+1 then 
if p114*k4/k1 in [0..k1-1-p121-p131] then p141:=p114*k4/k1; 
 
for p123 in [0..k1-p113] do 
if p123*k3/k2 in [0..k1-p112] and p123*k3/k1 in [0..k2-p121] then p132:=p123*k3/k2; p231:=p123*k3/k1;
for p124 in [0..k1-p114] do 
  if p124*k4/k2 in [0..k1-p112-p132] and p124*k4/k1 in [0..k2-p121] then p142:=p124*k4/k2; p241:=p124*k4/k1;
for p134 in [0..k1-p114-p124] do 
  if p134*k4/k3 in [0..k1-p113-p123] and p134*k4/k1 in [0..k3-p131] and p112+p113+p114+p123+p124+p134>0 then 

p143:=p134*k4/k3; p341:=p134*k4/k1;

p111:=k1-1-p121-p131-p141; if p111>-1 then 
p122:=k1-p112-p132-p142; if p122>-1 then 
p133:=k1-p113-p123-p143; if p133>-1 then 
p144:=k1-p114-p124-p134; if p144>-1 then 

C:=[[0,k1,0,0,0],
[1,k1-1-(p112*k2+p113*k3+p114*k4)/k1,p112*k2/k1,p113*k3/k1,p114*k4/k1],
[0,p112,k1-p112-(p123*k3+p124*k4)/k2,p123*k3/k2,p124*k4/k2],
[0,p113,p123,k1-p113-p123-p134*k4/k3,p134*k4/k3],
[0,p114,p124,p134,k1-p114-p124-p134]]; 

p:=MinimalPolynomial(C); 
if Degree(p)=5 then 
Print(n,[k1,k2,k3,k4],"\r");  

B:=[(C^0)[1],(C^1)[1],(C^2)[1],(C^3)[1],(C^4)[1]];
V:=VectorSpace(Rationals,B); 
if Dimension(V)=5 then 
B:=Basis(V,B);
b:=[]; 
K:=[[1,0,0,0,0],[0,k1,0,0,0],[0,0,k2,0,0],[0,0,0,k3,0],[0,0,0,0,k4]];
for i in [1..5] do 
  c:=Coefficients(B,K[i]);
  A:=0*C; 
  for j in [1..5] do 
    A:=A+c[j]*C^(j-1); 
  od; 
b[i]:=A; 
od; 

if IsSITA(b) then 
Print(n,[k1,k2,k3,k4],[p112,p113,p114,p123,p124,p134],"\r");  


if IntegralMultiplicitiesCheck5(p,[k1,k2,k3,k4]) then 

indexing_var := indexing_var +1;
n:=1+k1+k2+k3+k4;
Print(n,[k1,k2,k3,k4],[p112,p113,p114,p123,p124,p134],"\n");  
PrintTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var)," ");
AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"degree:",k1,"\n order:",n,"\n",[k1,k2,k3,k4],[p112,p113,p114,p123,p124,p134],"\n\n"); 
Print(Factors(p)); 
f:=Factors(p)[Length(Factors(p))]; 
AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"minimal polynomial:",Factors(p));

if Degree(f)>1 then 
Print(GaloisType(f),"               \n"); #else Print(" \n");
AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"\n Galois type:",GaloisType(f),"\n\n minimal polynomial of other basis elements:\n "); else Print(" \n");
fi; 


for i in [3..5] do 
Print(Factors(MinimalPolynomial(b[i])),"\n"); AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),MinimalPolynomial(b[i]),"\n");
od; 
Print(b,"\n"); AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"\n SITA:\n",b,"\n\n");
#Print(Factors(MinimalPolynomial(b[3])),"\n"); 
#Print(Factors(MinimalPolynomial(b[4])),"\n"); 
#Print(Factors(MinimalPolynomial(b[5])),"\n"); 
#Print(b,"\n \n"); 
#Add(A,b);
#AddSet(A1,Factors(p)); 
#else Print("                                                                  \r"); 

name := StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var);
Add(L,[k1,n,[k1,k2,k3,k4],Factors(p),StringFormatted("{}",name)]);

if IsPpolynomialTA(b) then Print("P-polynomial "); AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"\n P-polynomial\n","\n\n"); fi; 
if IsQpolynomialTA(b) then Print("Q-polynomial "); AppendTo(StringFormatted("data{1}-{2}-{3}.txt",k1,n,indexing_var),"\n Q-polynomial\n","\n\n"); fi; 
Print(" \n \n"); 


fi;
fi; fi; fi; 
fi;

fi; fi; fi; fi; od; 
fi; od; 
fi; od; 
fi; fi; od; od; 
fi; od; od; 
fi; od; od; od;
od;

#####ordering#########
orders_list := [];
for x in L do 
    Add(orders_list,x[2]);
    od;
Ordered := Set(orders_list);
    

######markdown table#############
PrintTo("markdown-table.md", " ");
AppendTo("markdown-table.md", "|Order|Degree|Degree sequence |Minimal polynomial| Details|Existence|\n");
AppendTo("markdown-table.md", "|:---|:---|:--------: |:---------:| :---:| :----:|\n");
for n in Ordered do
    for x in L do 
        if x[2] = n then
           AppendTo("markdown-table.md", StringFormatted("|{2}|{1}|{3}|{4}| [link]({5})|  |\n",x[1],x[2],x[3],x[4],x[5]));
        fi;
      od;
  od;

